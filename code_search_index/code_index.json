[{"id":"ZmlsZS0vbW50L2Mv","type":"file","name":"test-relay.js","qualifiedName":"/mnt/c/dev/hyper-nat/test-relay.js","file":"/mnt/c/dev/hyper-nat/test-relay.js","startLine":0,"endLine":182,"lines":183,"tokens":1146,"code":"const DHT = require('@hyperswarm/dht');\r\nconst net = require('net');\r\nconst pump = require('pump');\r\n\r\nasync function test() {\r\n    const CONNECTION_T...","mtime":1757359280031.614,"doc":"Create DHT nodes","children":["ZnVuY3Rpb24tdGVz"],"exports":[],"embedding":[-0.06684949994087219,0.020306849852204323,-0.01181633211672306,0.049548421055078506,-0.04952114447951317,-0.03412787988781929,-0.011433182284235954,0.03482964262366295,-0.055824294686317444,-0.016230277717113495,-0.021899491548538208,0.06073036044836044,-0.06136324256658554,0.0020217224955558777,-0.016195109114050865,0.10142824053764343,0.04034458473324776,-0.08473089337348938,0.11707616597414017,-0.06336075067520142,0.05358732491731644,-0.035590510815382004,0.07283025979995728,-0.060779865831136703,0.011089789681136608,-0.04403156787157059,-0.05288085713982582,-0.04607279226183891,-0.07122808694839478,0.04520565643906593,0.06857449561357498,-0.06901665776968002,-0.2072124034166336,0.05341838672757149,0.00985641684383154,0.0636630728840828,-0.011890985071659088,-0.04105241224169731,0.016923924908041954,0.039660848677158356,0.1506025642156601,-0.04671034961938858,-0.04049766808748245,0.013156009837985039,0.02839164063334465,0.0036613186821341515,-0.04163419455289841,0.028877997770905495,-0.012080857530236244,0.028149668127298355,-0.05175914615392685,-0.0729190930724144,0.053233545273542404,-0.007140979170799255,0.065921850502491,-0.0011263542110100389,-0.0009113703272305429,0.015146407298743725,0.048958566039800644,0.0008005814743228257,0.002593530807644129,0.06051488220691681,-0.0031444577034562826,-0.0172057393938303,0.017316261306405067,-0.05063837766647339,-0.018799271434545517,0.0579715371131897,0.016400810331106186,-0.04233960434794426,-0.023818491026759148,0.08034176379442215,0.02954547479748726,0.022331103682518005,-0.041566796600818634,0.008157171308994293,-0.016236430034041405,-0.015854181721806526,-0.016277145594358444,-0.0351763553917408,0.08011603355407715,-0.00985744409263134,-0.06718890368938446,-0.004900657571852207,-0.058032695204019547,0.052485741674900055,0.07084241509437561,0.004499313421547413,-0.05404827371239662,-0.09114724397659302,-0.04850379750132561,-0.010652244091033936,-0.18002434074878693,-0.006424701772630215,0.061041880398988724,-0.025216102600097656,-0.007407016586512327,0.062414977699518204,-0.04825958237051964,-0.0019301841966807842,0.0015125124482437968,-0.03792882338166237,0.010046004317700863,-0.012623906135559082,-0.004359042271971703,-0.04004863649606705,0.04283846169710159,-0.04943637549877167,0.022642234340310097,0.046376410871744156,-0.046405129134655,0.026804883033037186,-0.0049704695120453835,-0.05682145431637764,-0.011869467794895172,-0.012760905548930168,0.026199592277407646,0.018691381439566612,-0.006234233733266592,0.06450860947370529,-0.006339725106954575,0.012715077959001064,-0.035948049277067184,0.044562842696905136,0.03171572834253311,-0.021053606644272804,0.041021835058927536,5.013493324490641e-33,0.019377877935767174,-0.04025784879922867,-0.009303626604378223,0.07538457959890366,0.03162408620119095,0.0327044278383255,0.04873811453580856,-0.07195963710546494,-0.08826307207345963,0.013565348461270332,-0.09145801514387131,-0.08872803300619125,0.07192344963550568,-0.033561140298843384,-0.11511032283306122,-0.06755372881889343,0.035858578979969025,-0.01384864654392004,0.08108413964509964,-0.05464376509189606,0.013993845321238041,0.022076385095715523,-0.028335116803646088,-0.04862597584724426,-0.12130344659090042,-0.16810178756713867,-0.013690791092813015,-0.050240736454725266,0.02276723086833954,-0.008148396387696266,0.03386135771870613,0.049571238458156586,0.013936897739768028,0.04400152713060379,-0.06295514851808548,-0.029224975034594536,-0.02270815148949623,-0.006820923648774624,-0.05759229511022568,-0.03982260823249817,-0.018000304698944092,-0.013392196968197823,-0.01966797187924385,-0.010728697292506695,-0.03696710616350174,0.03565662354230881,-0.02192804589867592,0.019932972267270088,0.045993294566869736,-0.0033617564477026463,-0.010781848803162575,0.010127571411430836,-0.04009019583463669,-0.0617242194712162,0.08433647453784943,0.0732923299074173,0.011837959289550781,-0.022971561178565025,-0.021212870255112648,0.04742361977696419,-0.0017703295452520251,0.0029265007469803095,-0.09601198136806488,-0.03867499530315399,-0.008179184049367905,0.01980464719235897,-0.031314413994550705,-0.09000984579324722,0.043695688247680664,0.07227876782417297,-0.018995510414242744,-0.015675485134124756,-0.09147516638040543,0.05372676998376846,0.04028169810771942,0.010422475636005402,0.017841845750808716,0.05366217717528343,-0.08729158341884613,-0.05319717526435852,0.025997811928391457,-0.08209718018770218,0.025163684040308,0.08011545985937119,0.027735358104109764,-0.03930510953068733,-0.05058075115084648,-0.00045004129060544074,0.01309111900627613,-0.05493476986885071,0.07016162574291229,-0.003083311952650547,-0.020711973309516907,-0.047746941447257996,0.07329534739255905,-5.390718645219129e-33,-0.0793800875544548,0.06470268964767456,-0.049006137996912,0.023083055391907692,0.0550682432949543,0.0329069122672081,0.07981828600168228,-0.039571620523929596,-0.07730889320373535,0.13100653886795044,0.02344105765223503,-0.017365962266921997,-0.0021165763027966022,-0.053191620856523514,-0.03867792710661888,0.023003343492746353,-0.09146500378847122,-0.0770435780286789,0.07026763260364532,0.04202369600534439,0.05445030331611633,0.12402068823575974,0.06403010338544846,0.06293935328722,-0.050685327500104904,-0.001931179198436439,0.017034823074936867,0.0550246462225914,-0.034979261457920074,-0.03843451291322708,-0.008251666091382504,0.04244179278612137,-0.01070433296263218,0.0480552576482296,-0.0005035706562921405,-0.013710175640881062,0.04273241385817528,0.04944291710853577,0.019720928743481636,0.0035525455605238676,0.027607960626482964,0.021302910521626472,-0.001824904466047883,0.02476162649691105,0.018364690244197845,0.02663131058216095,0.049561988562345505,-0.04050217568874359,-0.03476867452263832,-0.005368822254240513,-0.10685033351182938,-0.03803855553269386,0.04876631498336792,-0.0016662365524098277,0.023397309705615044,0.002959642093628645,-0.001006048871204257,0.005727434530854225,0.043318260461091995,0.019874509423971176,0.014965596608817577,-0.06056148558855057,0.07030259817838669,0.001658287481404841,-0.03941715508699417,-0.08093922585248947,-0.03757040947675705,-0.02539745718240738,0.07743570953607559,0.024708259850740433,-0.06792429089546204,0.09315873682498932,-0.0006406634347513318,-0.007242497522383928,0.007492223288863897,-0.0579368993639946,-0.005481410305947065,0.017963625490665436,-0.020438002422451973,0.045834243297576904,0.001134101883508265,0.07177744805812836,-0.03384864330291748,-0.009041295386850834,0.09776955097913742,0.070070281624794,0.08097425848245621,0.08742813766002655,-0.026439914479851723,0.05475234240293503,0.005345781333744526,0.04350324347615242,-0.035744037479162216,0.014021038077771664,0.026869812980294228,-3.5013837162978234e-8,-0.018401963636279106,0.02511540986597538,-0.01924755610525608,0.0122508080676198,-0.10591082274913788,0.05902358144521713,0.04322860389947891,-0.009799511171877384,0.009439092129468918,0.02163209766149521,-0.06771303713321686,0.04302501678466797,0.013073180802166462,0.07699324190616608,-0.032063551247119904,-0.0326627641916275,-0.0010765420738607645,0.02234100177884102,0.028734790161252022,0.02062665857374668,0.044942457228899,0.0006080860621295869,-0.011602243408560753,0.18264977633953094,0.02797270007431507,0.10031024366617203,0.05348743870854378,-0.05941583961248398,-0.039080601185560226,0.04345889016985893,0.04754822701215744,0.01989412121474743,-0.014642045833170414,-0.09347725659608841,-0.1141728088259697,0.1360132098197937,-0.010293583385646343,0.037492383271455765,0.02300083264708519,0.024237116798758507,-0.08481884002685547,0.07019136101007462,0.046900756657123566,-0.002494228770956397,0.019906938076019287,-0.004504261538386345,-0.07313546538352966,-0.014014721848070621,-0.03804972022771835,-0.013416348956525326,0.028788503259420395,-0.04006493464112282,-0.010929410345852375,-0.0381820909678936,0.04199830815196037,-0.031376369297504425,-0.04887117072939873,-0.022383056581020355,-0.02947484701871872,-0.005901649594306946,0.05090070888400078,-0.017939340323209763,-0.007891073822975159,0.0055195423774421215]},{"id":"ZnVuY3Rpb24tdGVz","type":"function","name":"test","qualifiedName":"test","file":"/mnt/c/dev/hyper-nat/test-relay.js","startLine":4,"endLine":179,"lines":176,"tokens":1109,"code":"async function test() {\r\n    const CONNECTION_TIMEOUT = 15000;\r\n    \r\n    // Create DHT nodes\r\n    console.log('Creating nodes...');\r\n    const serverNode = new DHT();\r\n    const clientNode = new DHT();\r\n    await Promise.all([serverNode.ready(), clientNode.ready()]);\r\n    \r\n    const keyPair = DHT.keyPair();\r\n    console.log('Server public key:', keyPair.publicKey.toString('hex'));\r\n\r\n    // Create TCP server to simulate local service\r\n    const localServer = net.createServer((socket) => {\r\n        console.log('Local TCP server: new connection');\r\n        socket.on('data', (data) => {\r\n            console.log('Local TCP server received:', data.toString());\r\n            socket.write('Response from local server');\r\n        });\r\n    });\r\n    await new Promise(resolve => localServer.listen(3000, '127.0.0.1', resolve));\r\n    console.log('Local TCP server listening on 3000');\r\n\r\n    // Create DHT relay server\r\n    const relayServer = serverNode.createServer({ reusableSocket: true });\r\n    relayServer.on('connection', (remoteSock) => {\r\n        console.log('DHT relay: new connection');\r\n        \r\n        const localSocket = net.connect({\r\n            port: 3000,\r\n            host: '127.0.0.1',\r\n            allowHalfOpen: true\r\n        });\r\n\r\n        let destroyed = false;\r\n        const cleanup = () => {\r\n            if (!destroyed) {\r\n                destroyed = true;\r\n                try {\r\n                    localSocket.end();\r\n                    remoteSock.end();\r\n                } catch (err) {\r\n                    console.error('Cleanup error:', err);\r\n                }\r\n            }\r\n        };\r\n\r\n        localSocket.on('connect', () => {\r\n            console.log('Local connection established');\r\n            \r\n            pump(remoteSock, localSocket, remoteSock, (err) => {\r\n                console.log('Pump ended:', err ? err.message : 'cleanly');\r\n                cleanup();\r\n            });\r\n        });\r\n\r\n        localSocket.on('error', (err) => {\r\n            console.error('Local socket error:', err);\r\n            cleanup();\r\n        });\r\n\r\n        remoteSock.on('error', (err) => {\r\n            console.error('Remote socket error:', err);\r\n            cleanup();\r\n        });\r\n\r\n        localSocket.on('end', () => {\r\n            console.log('Local socket ended');\r\n            remoteSock.end();\r\n        });\r\n\r\n        remoteSock.on('end', () => {\r\n            console.log('Remote socket ended');\r\n            localSocket.end();\r\n        });\r\n    });\r\n\r\n    await relayServer.listen(keyPair);\r\n    console.log('DHT relay server listening');\r\n\r\n    // Test client connection\r\n    console.log('\\nTesting client connection...');\r\n    try {\r\n        // Create local server for client\r\n        const clientLocal = net.createServer((socket) => {\r\n            console.log('Client local server: new connection');\r\n            \r\n            const dhtConn = clientNode.connect(keyPair.publicKey, { \r\n                reusableSocket: true \r\n            });\r\n\r\n            let destroyed = false;\r\n            const cleanup = () => {\r\n                if (!destroyed) {\r\n                    destroyed = true;\r\n                    try {\r\n                        socket.end();\r\n                        dhtConn.end();\r\n                    } catch (err) {\r\n                        console.error('Client cleanup error:', err);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Wait for DHT connection\r\n            dhtConn.on('open', () => {\r\n                console.log('DHT connection established');\r\n                \r\n                pump(socket, dhtConn, socket, (err) => {\r\n                    console.log('Client pump ended:', err ? err.message : 'cleanly');\r\n                    cleanup();\r\n                });\r\n            });\r\n\r\n            dhtConn.on('error', (err) => {\r\n                console.error('DHT connection error:', err);\r\n                cleanup();\r\n            });\r\n\r\n            socket.on('error', (err) => {\r\n                console.error('Client local socket error:', err);\r\n                cleanup();\r\n            });\r\n\r\n            dhtConn.on('end', () => {\r\n                console.log('DHT connection ended');\r\n                socket.end();\r\n            });\r\n\r\n            socket.on('end', () => {\r\n                console.log('Client local socket ended');\r\n                dhtConn.end();\r\n            });\r\n        });\r\n\r\n        await new Promise(resolve => clientLocal.listen(3001, '127.0.0.1', resolve));\r\n        console.log('Client local server listening on 3001');\r\n\r\n        // Test the connection by sending data\r\n        console.log('\\nSending test data...');\r\n        const testConn = net.connect(3001, '127.0.0.1');\r\n        testConn.write('Test message');\r\n        \r\n        await new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => {\r\n                reject(new Error('Test timeout'));\r\n            }, CONNECTION_TIMEOUT);\r\n\r\n            testConn.on('data', (data) => {\r\n                console.log('Test client received:', data.toString());\r\n                clearTimeout(timeout);\r\n                resolve();\r\n            });\r\n\r\n            testConn.on('error', (err) => {\r\n                clearTimeout(timeout);\r\n                reject(err);\r\n            });\r\n        });\r\n\r\n        // Clean test connection\r\n        testConn.end();\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n        // Cleanup\r\n        console.log('\\nCleaning up...');\r\n        clientLocal.close();\r\n        localServer.close();\r\n        serverNode.destroy();\r\n        clientNode.destroy();\r\n\r\n    } catch (err) {\r\n        console.error('Test failed:', err);\r\n        throw err;\r\n    }\r\n}","mtime":1757359280031.614,"doc":"","isExported":false,"parameters":[],"returnType":"","complexity":6.5,"relationships":{"calls":["test","log","DHT","all","ready","keyPair","toString","createServer","on","write","Promise","listen","connect","end","error","pump","cleanup","setTimeout","reject","Error","clearTimeout","resolve","close","destroy"],"dependencies":["async","CONNECTION_TIMEOUT","15000","Create","DHT","nodes","console","Creating","serverNode","new","clientNode","await","Promise","keyPair","Server","public","publicKey","hex","TCP","server","to","simulate","local","service","localServer","net","socket","Local","connection","data","Response","from","resolve","3000","127","0","1","listening","on","relay","relayServer","remoteSock","localSocket","destroyed","cleanup","try","err","Cleanup","connect","established","Pump","message","cleanly","error","Remote","end","ended","Test","client","nTesting","for","clientLocal","Client","dhtConn","Wait","open","pump","3001","the","by","sending","nSending","test","testConn","reject","timeout","Clean","1000","nCleaning","up","throw"]},"embedding":[0.026728171855211258,0.02282656356692314,-0.026232631877064705,0.005301934201270342,-0.02510279417037964,-0.034586068242788315,0.024759497493505478,0.018695173785090446,-0.01049057673662901,-0.018902352079749107,0.08984831720590591,-0.08470217883586884,-0.016051046550273895,0.01600704900920391,0.008414730429649353,-0.08025491237640381,-0.037293631583452225,-0.03660677373409271,-0.027950776740908623,-0.050168439745903015,0.01372771617025137,-0.033800311386585236,-0.051656462252140045,0.041478317230939865,-0.039430852979421616,-0.02916780114173889,-0.030033769086003304,-0.00917670875787735,0.004463101737201214,-0.07351048290729523,0.025200290605425835,0.011762753129005432,-0.011543680913746357,0.004563286900520325,0.017422839999198914,0.030352171510457993,0.004572045058012009,0.0033029289916157722,0.06336133927106857,-0.004182108677923679,-0.11038707196712494,-0.12583158910274506,0.019869960844516754,-0.040697548538446426,0.038669001311063766,0.09032462537288666,0.04363008588552475,0.06895820796489716,-0.017305266112089157,0.03131169080734253,0.04242682829499245,0.02232731319963932,-0.08674142509698868,-0.07160424441099167,0.046885158866643906,-0.013829908333718777,0.04304046183824539,-0.08666800707578659,-0.024123074486851692,0.07276097685098648,-0.027857761830091476,-0.019718660041689873,0.04135359823703766,0.052874982357025146,0.06279660016298294,0.004385795909911394,0.018679210916161537,-0.07071446627378464,0.0010879369219765067,0.02157321572303772,-0.00019731912470888346,0.010972213931381702,0.052256256341934204,0.015512729994952679,0.06450457125902176,-0.01649734005331993,-0.03191434219479561,-0.02717159502208233,0.014008916914463043,-0.01611771062016487,0.02689715288579464,-0.060654982924461365,-0.03451495245099068,0.012753037735819817,0.026020120829343796,0.13861513137817383,0.010408529080450535,0.05795654281973839,-0.0836634635925293,0.05894427001476288,0.019366856664419174,0.08476918190717697,-0.07024335116147995,-0.027238931506872177,-0.060741763561964035,-0.04175072908401489,-0.0017817890038713813,-0.026247307658195496,0.020520010963082314,0.1502920538187027,-0.07363760471343994,0.00226342910900712,0.04973484203219414,-0.10427376627922058,-0.0652557760477066,-0.01287820003926754,0.035321809351444244,-0.058189891278743744,0.06908788532018661,0.006604158319532871,-0.0397176556289196,0.05397382751107216,0.06825977563858032,0.01760844513773918,0.05319609493017197,-0.07765357196331024,-0.047882433980703354,-0.044504448771476746,-0.0656277984380722,0.023888029158115387,0.061516422778367996,0.01556579302996397,0.03998381644487381,0.051379021257162094,-0.0293414369225502,0.02205631136894226,0.06032860279083252,-2.5295290284612028e-33,-0.02194998972117901,-0.09552360326051712,0.04341794550418854,0.020885277539491653,-0.027284611016511917,-0.005065950099378824,-0.0024769483134150505,0.00821755826473236,-0.10027319937944412,0.05509211868047714,-0.02626522071659565,0.012435522861778736,-0.004428871441632509,-0.023349709808826447,0.013157161884009838,0.07716408371925354,0.08240313827991486,-0.05204908549785614,-0.04135071858763695,0.020262816920876503,0.040199164301157,-0.1300850659608841,0.04576316475868225,-0.036884963512420654,-0.018255306407809258,-0.05091610550880432,-0.0030803519766777754,-0.00013228016905486584,0.02670261636376381,-0.019793745130300522,-0.09712741523981094,-0.0008051827899180353,-0.12165641039609909,0.05181240290403366,0.03579975664615631,0.017066091299057007,-0.04371131956577301,-0.012332471087574959,0.014056124724447727,-0.003659449052065611,-0.05467996001243591,-0.04317604377865791,-0.01294658798724413,0.019080616533756256,0.08773218095302582,-0.03310007601976395,-0.03628155589103699,0.012394048273563385,0.076164610683918,0.016339190304279327,-0.008164264261722565,0.011019913479685783,0.009733896702528,0.0358114168047905,-0.012167814187705517,0.033335477113723755,0.026862334460020065,-0.04001805931329727,-0.005891318432986736,0.05692639946937561,0.018847111612558365,-0.026782125234603882,-0.05046945437788963,0.02815949358046055,-0.04229359328746796,0.009577483870089054,-0.038791581988334656,-0.09498656541109085,0.06046977639198303,0.06655079126358032,0.08041449636220932,-0.004294801969081163,0.00063435168704018,0.011197851970791817,-0.004863318055868149,0.02136581763625145,-0.10356631875038147,-0.019886190071702003,-0.04235485941171646,-0.08305038511753082,0.10951223224401474,-0.06439628452062607,-0.0005682597402483225,-0.014194042421877384,0.018071528524160385,-0.07520759105682373,-0.014726589433848858,-0.0630486011505127,0.016787659376859665,-0.02836359664797783,-0.07650547474622726,0.04866669327020645,-0.012954402714967728,-0.024442454800009727,0.10983215272426605,7.590185390358742e-34,-0.049650076776742935,0.13284902274608612,-0.02932901121675968,0.08439604938030243,-0.03667280822992325,0.0077891661785542965,0.024518221616744995,-0.018206315115094185,-0.018472686409950256,0.09082794934511185,0.0664154663681984,-0.026207245886325836,0.03921116888523102,0.0029954456258565187,-0.038886040449142456,0.06268928945064545,-0.008076169528067112,-0.094037264585495,0.007299899589270353,0.023391034454107285,-0.07941073924303055,0.09064584225416183,0.05558148771524429,-0.00388575647957623,-0.09763353317975998,0.05449965223670006,0.06768480688333511,-0.07046177238225937,0.041340216994285583,-0.01620027981698513,0.03158271312713623,0.09439345449209213,0.014810429885983467,0.03246717527508736,0.08198031038045883,-0.042602624744176865,0.10369443148374557,-0.014351597055792809,-0.000350857968442142,-0.004547577351331711,0.10185438394546509,0.1272084265947342,0.09373418986797333,-0.06671696901321411,-0.03249277547001839,0.05202053487300873,0.04763743281364441,-0.05522486940026283,0.06177767366170883,0.02749304473400116,-0.07036066055297852,-0.02607584558427334,0.002419086406007409,-0.008112049661576748,-0.05490025505423546,0.019832216203212738,-0.04029747098684311,-0.036701951175928116,0.013477452099323273,0.013571666553616524,-0.05366087704896927,0.06916822493076324,0.024043681100010872,-0.021033024415373802,-0.07693146169185638,-0.10405036807060242,-0.006373059935867786,0.011634965427219868,0.09615010023117065,0.08570438623428345,0.0017358235782012343,0.0350692942738533,0.02791188657283783,-0.0582071878015995,-0.04434621334075928,0.039240166544914246,-0.09597400575876236,-0.04650438576936722,0.06242288276553154,0.09232606738805771,0.052380964159965515,-0.045311760157346725,-0.014817367307841778,0.02633635513484478,-0.09740100055932999,0.06805304437875748,0.04309428483247757,0.0722607895731926,-0.025178715586662292,-0.011567063629627228,0.054787226021289825,0.06432943046092987,-0.032575126737356186,-0.10167288035154343,0.004685551393777132,-1.3301652224129157e-8,-0.04928962513804436,-0.09336566179990768,-0.022885188460350037,-0.010277871042490005,-0.0483400784432888,-0.034596286714076996,-0.009436961263418198,-0.07150591909885406,-0.0318017341196537,-0.0677097737789154,0.0328814871609211,0.029477067291736603,0.02518921159207821,0.001148755312897265,0.002533038379624486,-0.011572519317269325,0.0061956229619681835,0.030531955882906914,-0.006058667786419392,0.0018947472563013434,-0.063221275806427,0.030390555039048195,-0.018805334344506264,0.02756348066031933,-0.035793744027614594,0.024076446890830994,-0.018066802993416786,0.044641297310590744,0.004715890623629093,-0.0009944303892552853,0.07702892273664474,0.041209571063518524,0.006691272836178541,-0.0656980648636818,-0.010028405115008354,0.044931016862392426,0.030617287382483482,0.059882938861846924,0.02302735485136509,0.07470273971557617,-0.06741064786911011,-0.0030953423120081425,0.012979522347450256,-0.05010227486491203,-0.0506124310195446,-0.10547905415296555,0.032690178602933884,-0.046116903424263,-0.005546855740249157,-0.08144772797822952,-0.015145126730203629,0.04042929410934448,-0.03649034723639488,-0.0009967003716155887,0.02248651720583439,0.016175542026758194,-0.009796474128961563,0.023238008841872215,-0.09464356303215027,0.048503004014492035,0.019441688433289528,0.05955834314227104,0.10713916271924973,-0.07516923546791077]}]